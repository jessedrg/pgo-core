datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  account   Account
  createdAt DateTime @default(now())
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  password  String
  roles     String[]
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model Offer {
  account     Account?         @relation(fields: [accountId], references: [id])
  accountId   String?
  createdAt   DateTime         @default(now())
  customCode  String?          @unique
  id          String           @id @default(cuid())
  parts       Part[]
  publishedAt DateTime?
  status      EnumOfferStatus?
  updatedAt   DateTime         @updatedAt
}

model Account {
  active         Boolean?
  agent          Agent?        @relation(fields: [agentId], references: [id])
  agentId        String?
  configuration  Json?
  createdAt      DateTime      @default(now())
  email          String        @unique
  id             String        @id @default(cuid())
  offers         Offer[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  partMessages   PartMessage[]
  parts          Part[]
  productions    Production[]
  quotes         Quote[]
  updatedAt      DateTime      @updatedAt
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?
}

model Part {
  account             Account?           @relation(fields: [accountId], references: [id])
  accountId           String?
  blueprint           MediaFile?         @relation(name: "blueprint", fields: [blueprintId], references: [id])
  blueprintId         String?
  createdAt           DateTime           @default(now())
  id                  String             @id @default(cuid())
  offer               Offer?             @relation(fields: [offerId], references: [id])
  offerId             String?
  organization        Organization?      @relation(fields: [organizationId], references: [id])
  organizationId      String?
  originalBlueprint   MediaFile?         @relation(name: "originalBluePrintInPart", fields: [originalBlueprintId], references: [id])
  originalBlueprintId String?
  originalModel       MediaFile?         @relation(name: "originalModel", fields: [originalModelId], references: [id])
  originalModelId     String?
  partConfiguration   PartConfiguration? @relation(fields: [partConfigurationId], references: [id])
  partConfigurationId String?
  partMessages        PartMessage[]
  partOnShape         PartOnShape?       @relation(fields: [partOnShapeId], references: [id])
  partOnShapeId       String?
  partsCount          Int?
  process             String?
  productionItems     ProductionItem[]
  quantities          Json?
  quoteItems          QuoteItem[]
  status              EnumPartStatus?
  stepModel           MediaFile?         @relation(name: "stepModel", fields: [stepModelId], references: [id])
  stepModelId         String?
  stlModel            MediaFile?         @relation(name: "stlModel", fields: [stlModelId], references: [id])
  stlModelId          String?
  surface             Float?
  updatedAt           DateTime           @updatedAt
  visible             Boolean?
  volume              Float?
  volumeBoundingBox   Float?
  volumeChips         Float?
  x                   Float?
  y                   Float?
  z                   Float?
}

model PartConfiguration {
  colorFinish  String?
  createdAt    DateTime @default(now())
  finish       String?
  hardness     String?
  id           String   @id @default(cuid())
  material     String?
  materialType String?
  part         Part
  tech         String?
  tolerance    Float?
  updatedAt    DateTime @updatedAt
  weight       Float?
}

model PartOnShape {
  createdAt DateTime @default(now())
  did       String?
  eid       String?
  id        String   @id @default(cuid())
  part      Part
  updatedAt DateTime @updatedAt
  wid       String?
}

model Quote {
  account     Account?          @relation(fields: [accountId], references: [id])
  accountId   String?
  completedAt DateTime?
  createdAt   DateTime          @default(now())
  id          String            @id @default(cuid())
  provider    Provider?         @relation(fields: [providerId], references: [id])
  providerId  String?
  quoteItems  QuoteItem[]
  status      EnumQuoteStatus[]
  updatedAt   DateTime          @updatedAt
}

model QuoteItem {
  basePrices       Price[]              @relation(name: "basePrices")
  constructionType String?
  createdAt        DateTime             @default(now())
  id               String               @id @default(cuid())
  margins          Float?
  part             Part?                @relation(fields: [partId], references: [id])
  partId           String?
  prices           Price[]              @relation(name: "prices")
  productionDays   Int?
  provider         Provider?            @relation(fields: [providerId], references: [id])
  providerId       String?
  quantities       Int?
  quote            Quote?               @relation(fields: [quoteId], references: [id])
  quoteId          String?
  status           EnumQuoteItemStatus?
  updatedAt        DateTime             @updatedAt
}

model Production {
  account         Account?              @relation(fields: [accountId], references: [id])
  accountId       String?
  createdAt       DateTime              @default(now())
  discomformity   Boolean?
  id              String                @id @default(cuid())
  order           Order?                @relation(fields: [orderId], references: [id])
  orderId         String?
  productionItems ProductionItem[]
  shipments       Shipment[]
  status          EnumProductionStatus?
  updatedAt       DateTime              @updatedAt
}

model ProductionItem {
  createdAt       DateTime    @default(now())
  id              String      @id @default(cuid())
  part            Part?       @relation(fields: [partId], references: [id])
  partId          String?
  production      Production? @relation(fields: [productionId], references: [id])
  productionId    String?
  quantity        Int?
  shippedQuantity Int?
  updatedAt       DateTime    @updatedAt
}

model MediaFile {
  blueprintInPart         Part[]   @relation(name: "blueprint")
  createdAt               DateTime @default(now())
  fileName                String?
  id                      String   @id @default(cuid())
  originalBluePrintInPart Part[]   @relation(name: "originalBluePrintInPart")
  originalModelInPart     Part[]   @relation(name: "originalModel")
  stepModelInPart         Part[]   @relation(name: "stepModel")
  stlModelInPart          Part[]   @relation(name: "stlModel")
  type                    String?
  updatedAt               DateTime @updatedAt
  url                     String?
}

model Provider {
  createdAt    DateTime    @default(now())
  currency     String?
  dateFormat   String?
  holidays     Holiday[]
  id           String      @id @default(cuid())
  name         String?
  quoteItems   QuoteItem[]
  quotes       Quote[]
  rating       Float?
  ratingData   Json?
  shipmentDays Int?
  technologies Json?
  type         String?
  updatedAt    DateTime    @updatedAt
  workingDays  Json?
}

model Order {
  billingAddress  Json?
  comment         String?
  createdAt       DateTime          @default(now())
  customCode      String?
  estimatedDays   Int?
  fees            Json?
  id              String            @id @default(cuid())
  orderItems      OrderItem[]
  payment         Payment?          @relation(fields: [paymentId], references: [id])
  paymentId       String?
  productions     Production[]
  shipments       Shipment[]
  shippingaddress Json?
  status          EnumOrderStatus[]
  subtotal        Float?
  taxes           Json?
  total           Float?
  updatedAt       DateTime          @updatedAt
}

model Organization {
  accounts        Account[]
  addresses       Address[]
  createdAt       DateTime                   @default(now())
  id              String                     @id @default(cuid())
  name            String?
  parts           Part[]
  paymentMethod   OrganizationPaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?
  updatedAt       DateTime                   @updatedAt
}

model OrderItem {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  price     Float?
  quantity  Int?
  total     Float?
  updatedAt DateTime @updatedAt
}

model Agent {
  account   Account
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  zones     Json?
}

model Address {
  company        String?
  country        String?
  createdAt      DateTime         @default(now())
  firstName      String?
  id             String           @id @default(cuid())
  lastName       String?
  locality       String?
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  organizationId String?
  phone          String?
  phonePrefix    String?
  postalCode     String?
  state          String?
  street         String?
  streetNumber   String?
  type           EnumAddressType?
  updatedAt      DateTime         @updatedAt
  vat            String?
}

model Shipment {
  courier        String?
  createdAt      DateTime            @default(now())
  declaredValues Float?
  delayedAt      DateTime?
  deliveredAt    DateTime?
  estimatedAt    DateTime?
  id             String              @id @default(cuid())
  order          Order?              @relation(fields: [orderId], references: [id])
  orderId        String?
  partial        Boolean?
  production     Production?         @relation(fields: [productionId], references: [id])
  productionId   String?
  shippedAt      DateTime?
  status         EnumShipmentStatus?
  tracking       String?
  trackingUrl    String?
  type           EnumShipmentType?
  updatedAt      DateTime            @updatedAt
}

model Payment {
  createdAt         DateTime           @default(now())
  id                String             @id @default(cuid())
  orders            Order[]
  status            EnumPaymentStatus?
  transactionId     String?
  transactionUserId String?
  updatedAt         DateTime           @updatedAt
}

model OrganizationPaymentMethod {
  createdAt    DateTime                           @default(now())
  data         Json?
  id           String                             @id @default(cuid())
  organization Organization[]
  type         EnumOrganizationPaymentMethodType?
  updatedAt    DateTime                           @updatedAt
}

model Invite {
  active    Boolean?
  createdAt DateTime  @default(now())
  email     String?   @unique
  expiresAt DateTime?
  id        String    @id @default(cuid())
  updatedAt DateTime  @updatedAt
}

model Holiday {
  createdAt  DateTime  @default(now())
  day        DateTime?
  id         String    @id @default(cuid())
  provider   Provider? @relation(fields: [providerId], references: [id])
  providerId String?
  updatedAt  DateTime  @updatedAt
}

model PartMessage {
  createdAt DateTime                 @default(now())
  id        String                   @id @default(cuid())
  message   String?
  part      Part?                    @relation(fields: [partId], references: [id])
  partId    String?
  sender    Account?                 @relation(fields: [senderId], references: [id])
  senderId  String?
  type      String?
  updatedAt DateTime                 @updatedAt
  userType  EnumPartMessageUserType?
}

model Price {
  amount              Float?
  createdAt           DateTime    @default(now())
  currency            String?
  id                  String      @id @default(cuid())
  quantity            Int?
  quoteItemBasePrices QuoteItem[] @relation(name: "basePrices")
  quoteItemPrices     QuoteItem[] @relation(name: "prices")
  updatedAt           DateTime    @updatedAt
}

model Margin {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  value     Float?
}

enum EnumOfferStatus {
  draft
  pending
  publish
  rejected
}

enum EnumPartStatus {
  draft
  pending
  rejected
  publish
}

enum EnumQuoteStatus {
  pending
  completed
  canceled
  rejected
}

enum EnumQuoteItemStatus {
  pending
  completed
  rejected
  canceled
}

enum EnumProductionStatus {
  pending
  processing
  shipped
  quality
  completed
  canceled
  rejected
}

enum EnumOrderStatus {
  onHold
  failed
  processing
  production
  quality
  shipped
  completed
  cancelled
  refound
}

enum EnumAddressType {
  Billing
  Shipping
}

enum EnumShipmentStatus {
  pending
  OnTransit
  delivered
}

enum EnumShipmentType {
  production
  order
}

enum EnumPaymentStatus {
  pending
  completed
  rejected
}

enum EnumOrganizationPaymentMethodType {
  bankAccount
  card
  deferred
  paypal
}

enum EnumPartMessageUserType {
  Agent
  Client
  Provider
}