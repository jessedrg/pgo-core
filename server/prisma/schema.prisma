datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  account        Account?      @relation(fields: [accountId], references: [id])
  accountId      String?
  createdAt      DateTime      @default(now())
  firstName      String?
  id             String        @id @default(cuid())
  lastName       String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  password       String
  payments       Payment[]
  roles          String[]
  updatedAt      DateTime      @updatedAt
  username       String        @unique
}

model Offer {
  account     Account[]
  createdAt   DateTime         @default(now())
  customNo    String?          @unique
  id          String           @id @default(cuid())
  parts       Part[]
  publishedAt DateTime?
  status      EnumOfferStatus?
  updatedAt   DateTime         @updatedAt
}

model Account {
  active        Boolean?
  configuration Json?
  createdAt     DateTime      @default(now())
  email         String        @unique
  id            String        @id @default(cuid())
  offers        Offer[]
  partMessages  PartMessage[] @relation(name: "sender")
  partSender    PartMessage[] @relation(name: "partSender")
  quotes        Quote[]
  updatedAt     DateTime      @updatedAt
  users         User[]
}

model Part {
  createdAt          DateTime            @default(now())
  id                 String              @id @default(cuid())
  offer              Offer?              @relation(fields: [offerId], references: [id])
  offerId            String?
  partConfigurations PartConfiguration[]
  partMessages       PartMessage[]
  partonshape        PartOnShape?        @relation(name: "partonshape", fields: [partonshapeId], references: [id])
  partonshapeId      String?
  partOnShapes       PartOnShape[]       @relation(name: "PartOnPartOnShapes")
  parts              Int?
  process            String?
  productionItems    ProductionItem[]
  quantities         Json?
  quote              Quote?              @relation(fields: [quoteId], references: [id])
  quoteId            String?
  quoteItems         QuoteItem[]
  status             EnumPartStatus?
  surface            Float?
  updatedAt          DateTime            @updatedAt
  visible            Boolean?
  volume             Float?
  volumeBoundingBox  Float?
  volumeChips        Float?
  x                  Float?
  y                  Float?
  z                  Float?
}

model PartConfiguration {
  colorFinish  String?
  createdAt    DateTime @default(now())
  finish       String?
  hardness     String?
  id           String   @id @default(cuid())
  material     String?
  materialType String?
  part         Part?    @relation(fields: [partId], references: [id])
  partId       String?
  tech         String?
  tolerance    Float?
  updatedAt    DateTime @updatedAt
  weight       Float?
}

model PartOnShape {
  createdAt DateTime @default(now())
  did       String?
  eid       String?
  id        String   @id @default(cuid())
  part      Part?    @relation(name: "PartOnPartOnShapes", fields: [partId], references: [id])
  partId    String?
  parts     Part[]   @relation(name: "partonshape")
  updatedAt DateTime @updatedAt
  wid       String?
}

model Quote {
  account     Account?          @relation(fields: [accountId], references: [id])
  accountId   String?
  completedAt DateTime?
  createdAt   DateTime          @default(now())
  id          String            @id @default(cuid())
  parts       Part[]
  provider    Provider?         @relation(fields: [providerId], references: [id])
  providerId  String?
  status      EnumQuoteStatus[]
  updatedAt   DateTime          @updatedAt
}

model QuoteItem {
  basePrices       Float?
  constructionType String?
  createdAt        DateTime             @default(now())
  id               String               @id @default(cuid())
  margins          Float?
  part             Part?                @relation(fields: [partId], references: [id])
  partId           String?
  prices           Float?
  productionDays   Int?
  provider         Provider?            @relation(fields: [providerId], references: [id])
  providerId       String?
  quantities       Int?
  status           EnumQuoteItemStatus?
  updatedAt        DateTime             @updatedAt
}

model Production {
  createdAt     DateTime              @default(now())
  discomformity Boolean?
  id            String                @id @default(cuid())
  order         Order?                @relation(fields: [orderId], references: [id])
  orderId       String?
  status        EnumProductionStatus?
  updatedAt     DateTime              @updatedAt
}

model ProductionItem {
  createdAt       DateTime @default(now())
  id              String   @id @default(cuid())
  part            Part?    @relation(fields: [partId], references: [id])
  partId          String?
  quantity        Int?
  shippedQuantity Int?
  updatedAt       DateTime @updatedAt
}

model MediaFile {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  type      String?
  updatedAt DateTime @updatedAt
  url       String?
}

model Provider {
  createdAt      DateTime    @default(now())
  currency       String?
  dateFormat     String?
  holidays       Holiday[]
  id             String      @id @default(cuid())
  name           String?
  quoteItems     QuoteItem[]
  quotes         Quote[]
  rating         Float?
  ratingData     Json?
  shippmentDates Int?
  technologies   Json?
  typeson        String?
  updatedAt      DateTime    @updatedAt
  workingDays    Json?
}

model Order {
  billingAddress  Json?
  comment         String?
  createdAt       DateTime         @default(now())
  customNo        String?
  estimatedDays   Int?
  fees            Json?
  id              String           @id @default(cuid())
  orderItems      OrderItem[]
  organization    Organization?    @relation(fields: [organizationId], references: [id])
  organizationId  String?
  payment         Payment?         @relation(fields: [paymentId], references: [id])
  paymentId       String?
  productions     Production[]
  shipment        Shipment?        @relation(fields: [shipmentId], references: [id])
  shipmentId      String?
  shippingaddress Json?
  state           EnumOrderState[]
  subtotal        Float?
  taxes           Json?
  total           Float?
  updatedAt       DateTime         @updatedAt
}

model Organization {
  addres    String?
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  name      String?
  orders    Order[]
  updatedAt DateTime @updatedAt
  users     User[]
}

model OrderItem {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  price     Float?
  quantity  Int?
  total     Float?
  updatedAt DateTime @updatedAt
}

model Agent {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  zones     Json?
}

model Address {
  company       String?
  country       String?
  createdAt     DateTime       @default(now())
  firstName     String?
  id            String         @id @default(cuid())
  lastName      String?
  locality      String?
  organizations Organization[]
  phone         String?
  phonePrefix   String?
  postalCode    String?
  state         String?
  street        String?
  streetNumber  String?
  type          String?
  updatedAt     DateTime       @updatedAt
  vat           String?
}

model Shipment {
  courier        String?
  createdAt      DateTime            @default(now())
  declaredValues Float?
  delayedAt      DateTime?
  deliveredAt    DateTime?
  estimatedAt    DateTime?
  id             String              @id @default(cuid())
  orders         Order[]
  partial        Boolean?
  realtedId      String?
  relatedType    String?
  shippedAt      DateTime?
  status         EnumShipmentStatus?
  tracking       String?
  trackingUrl    String?
  updatedAt      DateTime            @updatedAt
}

model Payment {
  createdAt         DateTime           @default(now())
  id                String             @id @default(cuid())
  orders            Order[]
  status            EnumPaymentStatus?
  transactionId     String?
  transactionUserId String?
  updatedAt         DateTime           @updatedAt
  user              User?              @relation(fields: [userId], references: [id])
  userId            String?
}

model AccountPaymentMethod {
  createdAt DateTime @default(now())
  data      Json?
  id        String   @id @default(cuid())
  type      String?
  updatedAt DateTime @updatedAt
}

model Invite {
  active    Boolean?
  createdAt DateTime  @default(now())
  email     String?   @unique
  expiresAt DateTime?
  id        String    @id @default(cuid())
  updatedAt DateTime  @updatedAt
}

model Session {
  authMethod   String?
  createdAt    DateTime @default(now())
  id           String   @id @default(cuid())
  sessionToken String?
  updatedAt    DateTime @updatedAt
}

model Holiday {
  createdAt  DateTime  @default(now())
  day        Int?
  id         String    @id @default(cuid())
  provider   Provider? @relation(fields: [providerId], references: [id])
  providerId String?
  updatedAt  DateTime  @updatedAt
}

model PartMessage {
  createdAt   DateTime @default(now())
  id          String   @id @default(cuid())
  message     String?
  messageType String?
  part        Part?    @relation(fields: [partId], references: [id])
  partId      String?
  reciever    Account? @relation(name: "partSender", fields: [recieverId], references: [id])
  recieverId  String?
  sender      Account? @relation(name: "sender", fields: [senderId], references: [id])
  senderId    String?
  type        String?
  updatedAt   DateTime @updatedAt
}

enum EnumOfferStatus {
  draft
  pending
  publish
  rejected
}

enum EnumPartStatus {
  draft
  pending
  rejected
  publish
}

enum EnumQuoteStatus {
  pending
  completed
  canceled
  rejected
}

enum EnumQuoteItemStatus {
  pending
  completed
  rejected
  canceled
}

enum EnumProductionStatus {
  pending
  processing
  shipped
  quality
  completed
  canceled
  rejected
}

enum EnumOrderState {
  onHold
  failed
  processing
  production
  quality
  shipped
  completed
  cancelled
  refound
}

enum EnumShipmentStatus {
  pending
  OnTransit
  delivered
}

enum EnumPaymentStatus {
  pending
  completed
  rejected
}